<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Variables
grav = 0.5;
hsp = 0;
vsp = 0;
movespeed = 4;
jumpspeed_normal = 7;
jumpspeed_powerup = 30;
hanging = false;

jumpspeed = jumpspeed_normal;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize emitter
//blood system
partBlood_sys = part_system_create();

//lood particle
partBlood = part_type_create();
part_type_sprite(partBlood,blood,0,1,0);
part_type_size(partBlood,0.45,0.001,-0.01,0);
part_type_speed(partBlood,1,3,0,0);
part_type_direction(partBlood,0,359,0,40);
part_type_gravity(partBlood,0.4,270);
part_type_life(partBlood,50,100);
part_system_depth(partBlood, -2 );

// create emmmiter
//partBlood_emit = part_emitter_create(partBlood_sys);

//update emmitter
//part_emitter_region(partBlood_sys,partBlood_emit,obj_player.x+5,obj_player.x+5,obj_player.y+5,obj_player.y+5,1,1);
//part_emitter_burst(partBlood_sys,partBlood_emit,partBlood,500);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hanging = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GM COMMANDS - COMMENT THIS SECTION OUT FOR CLIENT VERSION
//*******************************************************************
//*******************************************************************

    //Goto previous room
    if(room_exists(room_previous(room)) &amp;&amp; keyboard_check_pressed(vk_f1))
            room_goto_previous();
    //Goto next room
    if(room_exists(room_next(room)) &amp;&amp; keyboard_check_pressed(vk_f2))
            room_goto_next();
    //Restart level
    if(keyboard_check_pressed(vk_f3))
            room_restart();
            
//*******************************************************************           
//*******************************************************************



//Get Player Input
key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
key_left = keyboard_check(vk_left) || keyboard_check(ord("A"));
key_jump_held = keyboard_check(vk_space) || keyboard_check(vk_shift);
key_jump = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_shift);

if(key_left)
    left = true;
if(key_right)
    left = false;

//React to inputs
move = key_right - key_left;
hsp = move * movespeed;
if(vsp &lt; 10){
    vsp += grav;
}

if(place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_dead_platform)){
    vsp=key_jump * -jumpspeed;
}

if(vsp&lt;0) &amp;&amp;  (!key_jump_held)
 vsp = max(vsp,-jumpspeed/4);
 
if(keyboard_check_released(vk_up) and vspeed&lt;0)
    vspeed*=0.5; 

//Respawn if fall off of map
if(y&gt;window_get_height()){
    x=xstart;
    y=ystart;
}
 
//Horizontal Collision
if(place_meeting(x+hsp,y,obj_wall)  || place_meeting(x+hsp,y,obj_dead_platform)){
    
    yplus = 0;
    while((place_meeting(x+hsp,y-yplus,obj_wall) || place_meeting(x+hsp,y-yplus,obj_dead_platform)) &amp;&amp; yplus &lt;= abs(8*hsp))
        yplus +=1;
    if(place_meeting(x+hsp,y-yplus,obj_wall) || place_meeting(x+hsp,y-yplus,obj_dead_platform)){
        while(!place_meeting(x+sign(hsp),y,obj_wall)  &amp;&amp; !place_meeting(x+sign(hsp),y,obj_dead_platform))
            x+=sign(hsp);
        hsp = 0;
    }
    else{
        y -= yplus;
    }

}
x += hsp;

//Vertical Collision
if(place_meeting(x,y+vsp,obj_wall)  || place_meeting(x,y+vsp,obj_dead_platform)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)  &amp;&amp; !place_meeting(x,y+sign(vsp),obj_dead_platform)){
        y+=sign(vsp);
    }
    vsp = 0;
}

y += vsp;

//Collision with Spikes
if(place_meeting(x,y,obj_spikes)){
        instance_create(x,y,obj_dead_platform);
        partBlood_emit = part_emitter_create(partBlood_sys);
        part_emitter_region(partBlood_sys,partBlood_emit,obj_player.x+5,obj_player.x+5,obj_player.y-10,obj_player.y-10,1,1);
        part_emitter_burst(partBlood_sys,partBlood_emit,partBlood,500);
        sound_play(snd_spikes);
        x = xstart;
        y = ystart;
        
}

//Collision with Left Hook
if(place_meeting(x,y,obj_hook_left)){
        with(instance_nearest(x,y,obj_hook_left)){
            instance_destroy();
            instance_create(x,y,obj_dead_hang_left);
        }
        partBlood_emit = part_emitter_create(partBlood_sys);
        part_emitter_region(partBlood_sys,partBlood_emit,obj_player.x+5,obj_player.x+5,obj_player.y-10,obj_player.y-10,1,1);
        part_emitter_burst(partBlood_sys,partBlood_emit,partBlood,500);
        sound_play(snd_spikes);
        x = xstart;
        y = ystart;
        
}

//Collision with Right Hook
if(place_meeting(x,y,obj_hook_right)){
        with(instance_nearest(x,y,obj_hook_right)){
            instance_destroy();
            instance_create(x,y,obj_dead_hang_right);
        }
        partBlood_emit = part_emitter_create(partBlood_sys);
        part_emitter_region(partBlood_sys,partBlood_emit,obj_player.x+5,obj_player.x+5,obj_player.y-10,obj_player.y-10,1,1);
        part_emitter_burst(partBlood_sys,partBlood_emit,partBlood,500);
        sound_play(snd_spikes);
        x = xstart;
        y = ystart;
        
}

//Collision with Left Dead Hanging Sheep
if(place_meeting(x,y,obj_dead_hang_left) &amp;&amp; hanging = false &amp;&amp; vsp!=0){
      
          if(left = false){
                x = instance_nearest(x,y,obj_dead_hang_left).x-32;
                y = instance_nearest(x,y,obj_dead_hang_left).y+60;
                image_angle = 80;
                image_xscale = -1;
            }
            if(left = true){
                x = instance_nearest(x,y,obj_dead_hang_left).x+16;
                y = instance_nearest(x,y,obj_dead_hang_left).y+60;
                image_angle = 280;
                image_xscale = 1;
            }
        if(key_jump){
            hanging = true;
            alarm[1] = 30;  
            vsp=key_jump * -jumpspeed;
            image_angle = 1;
        }
        
}

//Collision with Right Dead Hanging Sheep
if(place_meeting(x,y,obj_dead_hang_right) &amp;&amp; hanging = false &amp;&amp; vsp!=0){

            if(left = false){
                x = instance_nearest(x,y,obj_dead_hang_right).x-32;
                y = instance_nearest(x,y,obj_dead_hang_right).y+60;
                image_angle = 80;
                image_xscale = -1;
            }
            if(left = true){
                x = instance_nearest(x,y,obj_dead_hang_right).x+16;
                y = instance_nearest(x,y,obj_dead_hang_right).y+60;
                image_angle = 280;
                image_xscale = 1;
            }
        if(key_jump){
            hanging = true;
            alarm[1] = 30;  
            vsp=key_jump * -jumpspeed;
            image_angle = 1;
        }
}

//Animate
if (move!=0 &amp;&amp; !place_meeting(x,y,obj_dead_hang_right))
    image_xscale = -move;
    
if (place_meeting(x,y+1,obj_wall) || place_meeting(x,y+1,obj_dead_platform)){
    if(hsp!=0)
        sprite_index = spr_player_move;
    else
        sprite_index = spr_player_idle;
}
else{
    if( vsp &lt; 0)
        sprite_index = spr_player_jump;
    else
        sprite_index = spr_player_fall;
    
}

    //Enemy Collision
/*if(place_meeting(x,y,obj_saw)){
partBlood_emit = part_emitter_create(partBlood_sys);
part_emitter_region(partBlood_sys,partBlood_emit,obj_player.x+5,obj_player.x+5,obj_player.y-10,obj_player.y-10,1,1);
part_emitter_burst(partBlood_sys,partBlood_emit,partBlood,500);     
} */


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spikes">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_spikes</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,14</point>
    <point>42,14</point>
    <point>42,54</point>
    <point>22,54</point>
  </PhysicsShapePoints>
</object>
